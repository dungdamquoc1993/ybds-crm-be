basePath: /
definitions:
  handlers.ProductImage:
    description: Product image information
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      filename:
        example: product_20230101_120000_abcdef12.jpg
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_primary:
        example: true
        type: boolean
      product_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      sort_order:
        example: 0
        type: integer
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      url:
        example: /uploads/products/product_20230101_120000_abcdef12.jpg
        type: string
    type: object
  handlers.ReorderRequest:
    description: Request to reorder product images
    properties:
      imageIds:
        example:
        - '[''550e8400-e29b-41d4-a716-446655440000'''
        - '''550e8400-e29b-41d4-a716-446655440001'']'
        items:
          type: string
        type: array
    type: object
  requests.AddOrderItemRequest:
    properties:
      inventory_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      quantity:
        example: 2
        type: integer
    type: object
  requests.CreateInventoryRequest:
    properties:
      color:
        type: string
      location:
        type: string
      quantity:
        type: integer
      size:
        type: string
    type: object
  requests.CreateMultipleInventoriesRequest:
    properties:
      inventories:
        items:
          $ref: '#/definitions/requests.CreateInventoryRequest'
        type: array
    type: object
  requests.CreateOrderRequest:
    properties:
      customer_email:
        example: john@example.com
        type: string
      customer_name:
        description: Customer information
        example: John Doe
        type: string
      customer_phone:
        example: "0912345678"
        type: string
      discount_amount:
        example: 10.5
        type: number
      discount_reason:
        example: Loyalty discount
        type: string
      items:
        items:
          $ref: '#/definitions/requests.OrderItemInfo'
        type: array
      notes:
        example: Please deliver in the morning
        type: string
      payment_method:
        example: cash
        type: string
      shipment_carrier:
        example: DHL
        type: string
      shipment_tracking_number:
        description: Shipment information
        example: TRACK123456789
        type: string
      shipping_address:
        description: Shipping address information
        example: 123 Main St
        type: string
      shipping_city:
        example: Ho Chi Minh City
        type: string
      shipping_country:
        example: Vietnam
        type: string
      shipping_district:
        example: District 1
        type: string
      shipping_ward:
        example: Ward 1
        type: string
      status:
        example: pending_confirmation
        type: string
    type: object
  requests.CreatePriceRequest:
    properties:
      currency:
        type: string
      end_date:
        type: string
      price:
        type: number
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  requests.OrderItemInfo:
    properties:
      inventory_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      quantity:
        example: 2
        type: integer
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  requests.UpdateInventoryRequest:
    properties:
      color:
        type: string
      location:
        type: string
      quantity:
        type: integer
      size:
        type: string
    type: object
  requests.UpdateOrderDetailsRequest:
    properties:
      customer_email:
        example: john@example.com
        type: string
      customer_name:
        description: Customer information
        example: John Doe
        type: string
      customer_phone:
        example: "0912345678"
        type: string
      discount_amount:
        example: 10.5
        type: number
      discount_reason:
        example: Free delivery
        type: string
      notes:
        example: Please deliver in the morning
        type: string
      payment_method:
        description: Order information
        example: cash
        type: string
      shipping_address:
        description: Shipping address information
        example: 123 Main St
        type: string
      shipping_city:
        example: Ho Chi Minh City
        type: string
      shipping_country:
        example: Vietnam
        type: string
      shipping_district:
        example: District 1
        type: string
      shipping_ward:
        example: Ward 1
        type: string
    type: object
  requests.UpdateOrderItemRequest:
    properties:
      quantity:
        example: 3
        type: integer
    type: object
  requests.UpdateOrderStatusRequest:
    properties:
      status:
        type: string
    type: object
  requests.UpdatePriceRequest:
    properties:
      currency:
        type: string
      end_date:
        type: string
      price:
        type: number
    type: object
  requests.UpdateShipmentRequest:
    properties:
      carrier:
        type: string
      tracking_number:
        type: string
    type: object
  requests.UpdateTelegramIDRequest:
    properties:
      telegram_id:
        type: integer
    type: object
  responses.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.ImageResponse:
    properties:
      created_at:
        type: string
      filename:
        type: string
      id:
        type: string
      is_primary:
        type: boolean
      product_id:
        type: string
      sort_order:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  responses.InventoryResponse:
    properties:
      color:
        type: string
      created_at:
        type: string
      id:
        type: string
      location:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      size:
        type: string
      updated_at:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.NotificationResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_read:
        type: boolean
      message:
        type: string
      redirect_url:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  responses.NotificationsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.NotificationResponse'
        type: array
      message:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      success:
        type: boolean
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  responses.OrderDetail:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      created_by_name:
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      discount_amount:
        type: number
      discount_reason:
        type: string
      final_total:
        type: number
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/responses.OrderItemResponse'
        type: array
      notes:
        type: string
      payment_method:
        type: string
      shipment:
        $ref: '#/definitions/responses.ShipmentResponse'
      shipping_address:
        type: string
      shipping_city:
        type: string
      shipping_country:
        type: string
      shipping_district:
        type: string
      shipping_ward:
        type: string
      status:
        type: string
      total:
        type: number
      updated_at:
        type: string
    type: object
  responses.OrderDetailResponse:
    properties:
      data:
        $ref: '#/definitions/responses.OrderDetail'
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.OrderItemDetailResponse:
    properties:
      data:
        $ref: '#/definitions/responses.OrderItemResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.OrderItemResponse:
    properties:
      color:
        type: string
      created_at:
        type: string
      currency:
        type: string
      id:
        type: string
      inventory_id:
        type: string
      notes:
        type: string
      order_id:
        type: string
      price:
        type: number
      price_id:
        type: string
      product_id:
        type: string
      product_image:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
      size:
        type: string
      subtotal:
        type: number
      updated_at:
        type: string
    type: object
  responses.OrderResponse:
    properties:
      data:
        $ref: '#/definitions/responses.OrderDetail'
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.OrdersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/responses.OrderDetail'
        type: array
      message:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      success:
        type: boolean
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  responses.PriceResponse:
    properties:
      created_at:
        type: string
      currency:
        type: string
      end_date:
        type: string
      id:
        type: string
      price:
        type: number
      product_id:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  responses.ProductDetailResponse:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      images:
        items:
          $ref: '#/definitions/responses.ImageResponse'
        type: array
      inventories:
        items:
          $ref: '#/definitions/responses.InventoryResponse'
        type: array
      name:
        type: string
      prices:
        items:
          $ref: '#/definitions/responses.PriceResponse'
        type: array
      sku:
        type: string
      updated_at:
        type: string
    type: object
  responses.ProductsResponse:
    properties:
      message:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      products:
        items:
          $ref: '#/definitions/responses.ProductDetailResponse'
        type: array
      success:
        type: boolean
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  responses.RegisterResponse:
    properties:
      email:
        type: string
      message:
        type: string
      success:
        type: boolean
      user_id:
        type: string
      username:
        type: string
    type: object
  responses.ShipmentResponse:
    properties:
      carrier:
        type: string
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      tracking_number:
        type: string
      updated_at:
        type: string
    type: object
  responses.SingleUserResponse:
    properties:
      data:
        $ref: '#/definitions/responses.UserDetailResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.SuccessResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.UserDetailResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      roles:
        items:
          type: string
        type: array
      telegram_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  responses.UsersResponse:
    properties:
      message:
        type: string
      page:
        type: integer
      page_size:
        type: integer
      success:
        type: boolean
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/responses.UserDetailResponse'
        type: array
    type: object
  services.MultipleProductImageResult:
    properties:
      error:
        type: string
      images:
        items:
          $ref: '#/definitions/services.ProductImageResult'
        type: array
      message:
        type: string
      product_id:
        type: string
      success:
        type: boolean
    type: object
  services.ProductImageResult:
    properties:
      error:
        type: string
      filename:
        type: string
      imageID:
        type: string
      isPrimary:
        type: boolean
      message:
        type: string
      productID:
        type: string
      sortOrder:
        type: integer
      success:
        type: boolean
      url:
        type: string
    type: object
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io/docs/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: YBDS API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: YBDS API
  version: "1.0"
paths:
  /api/admin/notifications:
    get:
      consumes:
      - application/json
      description: Get a list of all notifications for the current user with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Get only unread notifications
        in: query
        name: unread_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.NotificationsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all notifications for the current user
      tags:
      - notifications
  /api/admin/notifications/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a specific notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Mark a notification as read
      tags:
      - notifications
  /api/admin/notifications/read-all:
    put:
      consumes:
      - application/json
      description: Mark all notifications for the current user as read
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Mark all notifications as read
      tags:
      - notifications
  /api/admin/notifications/unread:
    get:
      consumes:
      - application/json
      description: Get a list of unread notifications for the current user
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.NotificationsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get unread notifications for the current user
      tags:
      - notifications
  /api/admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users with their roles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users with their relationships
      tags:
      - users
  /api/admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific user with their roles
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SingleUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID with all relationships
      tags:
      - users
  /api/admin/users/{id}/telegram:
    patch:
      consumes:
      - application/json
      description: Update the Telegram ID for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Telegram ID info
        in: body
        name: telegramRequest
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTelegramIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SingleUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a user's Telegram ID
      tags:
      - users
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login for admin and AI agent users
      parameters:
      - description: Login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login to the application
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email or phone and password
      parameters:
      - description: Registration details
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/health:
    get:
      consumes:
      - application/json
      description: Check if the service is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check endpoint
      tags:
      - health
  /api/orders:
    get:
      consumes:
      - application/json
      description: Get a list of all orders with pagination, filtering and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by creator ID
        in: query
        name: created_by
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        in: query
        name: from_date
        type: string
      - description: Filter by end date (YYYY-MM-DD)
        in: query
        name: to_date
        type: string
      - description: Filter by customer phone number
        in: query
        name: phone_number
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrdersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with items and optional shipment information.
        Only customer_name and items are required, all other fields are optional.
        Customer phone number must be a valid Vietnamese number.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/requests.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new order
      tags:
      - orders
  /api/orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order and all its items
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get a specific order with all its items and details
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an order by ID
      tags:
      - orders
  /api/orders/{id}/details:
    put:
      consumes:
      - application/json
      description: Update the details of an order including payment details, shipping
        address, and customer information. Customer phone number must be a valid Vietnamese
        number. Admins can update any order. Agents can only update orders with status
        'pending_confirmation', 'confirmed', or 'shipment_requested'.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateOrderDetailsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update order details
      tags:
      - orders
  /api/orders/{id}/items:
    post:
      consumes:
      - application/json
      description: Add a new item to an existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/requests.AddOrderItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.OrderItemDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add an item to an order
      tags:
      - orders
  /api/orders/{id}/shipment:
    put:
      consumes:
      - application/json
      description: Update the shipment details of an order. Admins can update any
        order's shipment. Agents can only update shipments for orders with status
        'pending_confirmation', 'confirmed', or 'shipment_requested'.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Shipment details
        in: body
        name: shipment
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateShipmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update shipment details
      tags:
      - orders
  /api/orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order. Admins can change to any status.
        Agents can only change orders with status 'pending_confirmation', 'confirmed',
        or 'shipment_requested'.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Order status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an order's status
      tags:
      - orders
  /api/orders/items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing order item
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an order item
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update the quantity of an order item. Admins can update any order
        item. Agents can only update items if the order status is 'pending_confirmation',
        'confirmed', or 'shipment_requested'.
      parameters:
      - description: Order Item ID
        in: path
        name: id
        required: true
        type: string
      - description: Order item details
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateOrderItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderItemDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an order item
      tags:
      - orders
  /api/orders/phone/{phone}:
    get:
      consumes:
      - application/json
      description: Get a list of all orders with a specific customer phone number
      parameters:
      - description: Customer phone number
        in: path
        name: phone
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Filter by start date (YYYY-MM-DD)
        in: query
        name: from_date
        type: string
      - description: Filter by end date (YYYY-MM-DD)
        in: query
        name: to_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrdersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get orders by phone number
      tags:
      - orders
  /api/orders/tracking/{number}:
    get:
      consumes:
      - application/json
      description: Get a specific order by its shipment tracking number
      parameters:
      - description: Tracking Number
        in: path
        name: number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.OrderDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get order by tracking number
      tags:
      - orders
  /api/products:
    get:
      consumes:
      - application/json
      description: Get a list of all products with pagination, filtering and search
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ProductsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with optional inventories, prices, and images.
        Images are stored at /uploads/products/ path.
      parameters:
      - description: Product name
        in: formData
        name: name
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product SKU (unique identifier)
        in: formData
        name: sku
        required: true
        type: string
      - description: Product category
        in: formData
        name: category
        required: true
        type: string
      - description: JSON array of inventory objects [{\
        in: formData
        name: inventories
        type: string
      - description: JSON array of price objects [{\
        in: formData
        name: prices
        type: string
      - description: Product images (can upload multiple, first image will be set
          as primary)
        in: formData
        name: images
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Returns the created product with all related data
          schema:
            $ref: '#/definitions/responses.ProductDetailResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product and all associated inventories and prices
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get detailed information about a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ProductDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - multipart/form-data
      description: Update a product's information and optionally upload new images.
        Images are stored at /uploads/products/ path.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product name
        in: formData
        name: name
        type: string
      - description: Product description
        in: formData
        name: description
        type: string
      - description: Product SKU (unique identifier)
        in: formData
        name: sku
        type: string
      - description: Product category
        in: formData
        name: category
        type: string
      - description: Product images to add (can upload multiple, first image will
          be set as primary if no existing images)
        in: formData
        name: images
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated product with all related data
          schema:
            $ref: '#/definitions/responses.ProductDetailResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /api/products/{id}/images:
    get:
      consumes:
      - application/json
      description: Get a list of all images associated with a product. Images are
        stored at /uploads/products/ path.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of product images with URLs, filenames, and
            metadata
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/handlers.ProductImage'
                  type: array
              type: object
        "400":
          description: Invalid product ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all images for a product
      tags:
      - product-images
    post:
      consumes:
      - multipart/form-data
      description: Upload a new image for a product. Images are stored at /uploads/products/
        path.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Image file (supported formats: JPG, PNG, GIF)'
        in: formData
        name: file
        required: true
        type: file
      - description: 'Set as primary image (default: false)'
        in: formData
        name: is_primary
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Returns the uploaded image details including URL and metadata
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.ProductImage'
              type: object
        "400":
          description: Invalid request or file format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload an image for a product
      tags:
      - product-images
  /api/products/{id}/images/{imageId}:
    delete:
      consumes:
      - application/json
      description: Delete an image associated with a product. This will remove both
        the database record and the physical file.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Image deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.ProductImageResult'
              type: object
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product or image not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a product image
      tags:
      - product-images
  /api/products/{id}/images/{imageId}/primary:
    put:
      consumes:
      - application/json
      description: Set an existing image as the primary image for a product. The primary
        image URL will be used as the main product image.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns the updated image details
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/handlers.ProductImage'
              type: object
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product or image not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Set an image as the primary image for a product
      tags:
      - product-images
  /api/products/{id}/images/multiple:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple images for a product at once. Images are stored
        at /uploads/products/ path.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Image files (supported formats: JPG, PNG, GIF) - can upload
          multiple files'
        in: formData
        name: files
        required: true
        type: file
      - description: 'Index of the image to set as primary (0-based, default: -1 which
          means don''t set any as primary)'
        in: formData
        name: primary_index
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns details of all uploaded images
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/services.MultipleProductImageResult'
              type: object
        "400":
          description: Invalid request or file format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload multiple images for a product
      tags:
      - product-images
  /api/products/{id}/images/reorder:
    put:
      consumes:
      - application/json
      description: Update the sort order of product images to control their display
        order
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Array of image IDs in the desired display order
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.ReorderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Images reordered successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Invalid request or ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Product or image not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reorder product images
      tags:
      - product-images
  /api/products/{id}/inventories:
    post:
      consumes:
      - application/json
      description: Add inventory information for a specific product. Can create a
        single inventory or multiple inventories at once.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Single inventory information
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/requests.CreateInventoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.InventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create inventory for a product
      tags:
      - products
  /api/products/{id}/inventories/batch:
    post:
      consumes:
      - application/json
      description: Add multiple inventory items for a specific product at once
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Multiple inventory information
        in: body
        name: inventories
        required: true
        schema:
          $ref: '#/definitions/requests.CreateMultipleInventoriesRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.InventoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create multiple inventories for a product
      tags:
      - products
  /api/products/{id}/prices:
    post:
      consumes:
      - application/json
      description: Add price information for a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Price information
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new price for a product
      tags:
      - products
  /api/products/inventories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an inventory record
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an inventory
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update inventory information
      parameters:
      - description: Inventory ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated inventory information
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateInventoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.InventoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an inventory
      tags:
      - products
  /api/products/prices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a price record
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a price
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update price information
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated price information
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PriceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a price
      tags:
      - products
securityDefinitions:
  ApiKeyAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Product management endpoints
  name: products
- description: Product image management endpoints. Images are stored at /uploads/products/
    and can be accessed via this path.
  name: product-images
x-upload-info:
  allowed-types:
  - image/jpeg
  - image/png
  - image/gif
  - image/webp
  base-path: /uploads
  max-size: 10MB
  products-path: /uploads/products
